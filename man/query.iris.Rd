% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{query.iris}
\alias{check.query}
\alias{iris.query}
\alias{query.iris}
\title{Perform a query to IRIS-WS}
\usage{
query.iris(iquery, filename = "iris.query.results", is.binary = FALSE,
  check = TRUE, verbose = TRUE, ...)

iris.query(iquery, filename = "iris.query.results", is.binary = FALSE,
  check = TRUE, verbose = TRUE, ...)

check.query(iquery)
}
\arguments{
\item{iquery}{character; the web service query}

\item{filename}{character; the file to save query results to.
If this is \code{NULL} a
temporary file from \code{\link{tempfile}} is used.}

\item{is.binary}{logical; will the output be binary? (e.g., \code{TRUE} for SAC binary, and \code{FALSE} for a plot)}

\item{check}{logical; should \code{\link{check.query}} be used to check the quality of \code{iquery}}

\item{verbose}{logical; should messages be given by this function, and \code{\link{curlPerform}}?}

\item{...}{additional arguments to \code{\link{curlPerform}}}
}
\value{
A list (invisibly) with the filename, the query string, and a success flag
}
\description{
Perform a query to IRIS-WS
}
\details{
This function uses \code{\link{curlPerform}} in the \strong{RCurl} package
to query the IRIS WS. 
Firstly, it
checks \code{query} 
for internal consistency, with \code{\link{check.query}};
then, \code{query} is checked externally with \code{\link{url.exists}}.
 If \code{query} passes the checks, then it is sent to the IRIS WS
and successfull results are written to \code{filename} (which is instantiated
with \code{\link{CFILE}}).

\code{\link{iris.query}} is simply a pointer to \code{\link{query.iris}}
}
\examples{
\dontrun{
#
# irisws can be used to get timeseries, etc
# but there is also a fair amount invested in 
# preventing failure because of bad args, etc
#
# This query will create ANMO.png (setting duration, but could also use end=2005.002T00:00:00)
# constructor2 assembles all the options for a given webservice into a query
Q <- constructor2(net="IU", sta="ANMO", loc="00", cha="BHZ", starttime="2005.001T00:00:00", duration="1000", output="plot")
# and this performs the query
query.iris(Q, "ANMO.png")
# again, but in a temporary file
query.iris(Q, NULL)
#... and in the default file
query.iris(Q)
#
# This query will fail, obviously (unless there's a seismic network named 'XXXTHISWILLFAILXXX')
Q <- constructor("net=XXXTHISWILLFAILXXX")
query.iris(Q)

# Arbitrary query generation
q1 <- params2queryparams(a=1, defaults=list(a=TRUE))
q2 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=NA))
q3 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=FALSE))
q4 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=FALSE), exclude.empty.options=FALSE)
q5 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=TRUE))
q6 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=FALSE,d=NA,e=""))
q7 <- params2queryparams(a=1, defaults=list(a=TRUE,b=2,c=FALSE,d=NA,e=""), exclude.empty.options = FALSE, exclude.null.fields = FALSE)
q1;q2;q3;q4;q5;q6;q7

# Arbitrary query validation
try(check.query(q1))  # succeeds
try(check.query(q2)) # fails
try(check.query(q3)) # succeeds
try(check.query(q4)) # fails
try(check.query(q5)) # fails
try(check.query(q6)) # fails
try(check.query(q7)) # fails
}
}
\author{
AJ Barbour
}
\seealso{
\code{\link{irisws-package}}

Other Utilities: \code{\link{irisws-package}},
  \code{\link{irisws-queryconstruction}},
  \code{\link{irisws-timeutilities}},
  \code{\link{irisws-wadl}}
}

