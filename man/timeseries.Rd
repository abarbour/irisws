\name{timeseries}
\alias{timeseries}
\alias{timeseries.ws}
\alias{ws.timeseries}
\title{Access to the 'timeseries' Web Service for obtaining continuous data}
\usage{
ws.timeseries(network, station, location, channel, starttime, duration,
  endtime = NULL, output = c("sac.bin", "ascii", "plot", "ascii.values",
  "sac.asc", "miniseed", "audio"), filename = NA, endianness = c("auto",
  "little", "big"), load.results = TRUE, verbose = TRUE,
  curl.verbose = FALSE, opts = list(), ...)

timeseries.ws(network, station, location, channel, starttime, duration,
  endtime = NULL, output = c("sac.bin", "ascii", "plot", "ascii.values",
  "sac.asc", "miniseed", "audio"), filename = NA, endianness = c("auto",
  "little", "big"), load.results = TRUE, verbose = TRUE,
  curl.verbose = FALSE, opts = list(), ...)
}
\arguments{
  \item{network}{character; the network code}

  \item{station}{character; the station code}

  \item{location}{character; the location code}

  \item{channel}{character; the channel code}

  \item{starttime}{character; the beginning of the record}

  \item{duration}{numeric; the length of the record, in
  seconds.  This will be ignored if \code{enddate} is not
  \code{NULL}.}

  \item{endtime}{character; the end of the record}

  \item{output}{character; the type of file to output to.
  See \strong{Details}}

  \item{filename}{\code{NA} for an auto-generated filename
  based on the inputs; \code{NULL} for a temporary
  filename; or, a character string of the user's choosing.
  See \strong{Details} for details about the auto-generated
  name.}

  \item{endianness}{character; specify the endianness of
  binary SAC output. \code{'auto'} uses the platform value,
  or \code{'little'} and \code{'big'} can be used to force
  a specific structure.}

  \item{load.results}{logical; should the program try and
  load the file within R? Currently the following formats
  can be loaded: \code{'sac.bin'}, \code{'ascii'},
  \code{'plot'}, \code{'ascii.values'}, \code{'sac.asc'}}

  \item{verbose}{logical; should messages be given?}

  \item{curl.verbose}{logical; should messages from
  \code{\link{curlPerform}} be given?}

  \item{opts}{list; additional query parameters. Because
  \code{\link{constructor2}} is used, any bogus options are
  ignored.}

  \item{...}{additional parameters to XXX}
}
\value{
A list (invisibly) with the query string, and data from the
result
}
\description{
From [1]: \emph{The ws-timeseries service provides access
to individual channels of time series data for a specified
time range. Requested segments may be up to 30 days in
length and optional signal processing may be applied to
return data. The time series may be returned in a variety
of formats.}
}
\details{
The query is generated with \code{\link{constructor2}}, and
executed with \code{\link{query.iris}}, which throws errors
based on \code{\link{check.query}}.

\subsection{Output format options (\code{output=})}{
\itemize{ \item{\code{'miniseed'}}: miniSEED
\item{\code{'sac.asc'}}: SAC Alpha (ASCII)
\item{\code{'sac.bin'}}: SAC binary (either big or little
endian) \item{\code{'audio'}}: Audio (WAV format)
\item{\code{'plot'}}: PNG plot
\item{\code{'ascii.values'}}: ASCII (values only)
\item{\code{'ascii'}}: ASCII (values, and datetimes) } The
SAC formats are read in through \code{\link{read.sac}}. }

\subsection{Filename options (\code{filename=})}{ \itemize{
\item{\code{NA}}: An auto-generated file.
\item{\code{NULL}}: A temporary file.  \item{<character
string>}: Any desired name.  } Autogenerated files are of
the form:

\code{iriswsQ.<network>.<station>.<location>.<channel>.<starttime>.<end>.<extension>}
where \code{end} is either '\code{endtime}', or
'\code{<duration>s}' and \code{extension} will depend on
\code{output}.

Temporary files are generated within
\code{\link{query.iris}}. }

\subsection{Signal processing options}{ \itemize{
\item{high, low and band-pass filter (\code{})}
\item{remove mean value (\code{})} \item{scaling by
constant value (\code{})} \item{deconvolution of instrument
response (with frequency limits and unit conversion)
(\code{})} \item{differentiation and integration (\code{})}
\item{decimation to lower sample rates (\code{})} } }
}
\examples{
\dontrun{
#
# El Mayor Cucapah earthquake (M7.2 April 4, 2010)
#
net <- "PB"
sta <- "B084"
loc <- "--"
cha <- "LDD"  # pore fluid pressure
elmayor <- "2010.094T22:00:00.000000" # or "2010-04-04T00:00:00"
dur <- 7200
ws.timeseries(net, sta, loc, cha, elmayor, dur, output="plot")
#
# or use the string builder
elmayor <- timestring(2010,94,22,0,0)
ws.timeseries(net, sta, loc, cha, elmayor, dur, output="plot")
sacd <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="sac.bin")
print(str(sacd))
plot(ts(sacd$querydata$amp, deltat=sacd$querydata$dt))
#
#
# SAC FORMAT: ASCII
xa <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="sac.asc")
# SAC binary
xb <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="sac.bin")
plot(xa$querydata$amp)
lines(xb$querydata$amp, col="red")
#
#
# REGULAR ASCII
#  ascii with a datetime string and values
#  (the datetime string is converted to POSIXlt with lubridate)
xa <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="ascii")
plot(xa$querydata, type="s")
#
#  ASCII, again, but only values are returned (and metadata)
xa <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="ascii.values")
dat <- xa$querydata$value
plot(dat, type="s")
#
# we can use the header metadata to align in time
hdr <- attr(xa$querydata,"header")
require(lubridate)
tst <- ymd_hms(hdr[7])
npt <- as.numeric(hdr[3])
sps <- as.numeric(hdr[5])
datDatetime <- seq(from=tst, to=(tst+npt*sps), length.out=npt)
plot(datDatetime, dat, type="s")
#
#
# PNG plot
require(png)
xp <- ws.timeseries(net, sta, loc, cha, elmayor, dur, output="plot")
plot(1:2)
rasterImage(xa$querydata, 1, 1, 2, 2)
}
}
\author{
AJ Barbour
}
\references{
[1] \url{http://service.iris.edu/irisws/timeseries/1/}

[2]
\url{http://www.iris.edu/dms/nodes/dmc/data/formats/simple-ascii/}
}
\seealso{
\code{\link{timestring}} to make properly formatted time
strings

\code{\link{read.sac}} for SAC data reader

Other WebServices: \code{\link{.llpair}},
\code{\link{PS_time.distances}},
\code{\link{PS_time.stations}}, \code{\link{traveltime}},
\code{\link{traveltimes}}, \code{\link{tt}},
\code{\link{ttDeg.ws}}, \code{\link{ttKm.ws}},
\code{\link{ttStaSrc.ws}}, \code{\link{ws.traveltime}},
\code{\link{ws.ttDeg}}, \code{\link{ws.ttDistances}},
\code{\link{ws.ttKm}}, \code{\link{ws.ttStaSrc}};
\code{\link{distaz}}, \code{\link{distaz.ws}},
\code{\link{ws.distaz}}; \code{\link{flinnengdahl}},
\code{\link{flinnengdahl.ws}},
\code{\link{ws.flinnengdahl}};
\code{\link{irisws-webservices}},
\code{\link{irisws-webservices-package}},
\code{\link{services}}, \code{\link{webservice}},
\code{\link{webservices}}, \code{\link{ws}};
\code{\link{resp}}, \code{\link{resp.ws}},
\code{\link{ws.resp}}
}

